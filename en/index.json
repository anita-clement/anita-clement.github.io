[{"categories":null,"content":"PEP 8 or How to Make your Code Readable Why is code readability and consistency that important?\nBecause \u0026ldquo;Code is read much more often than it is written.” as Guido van Rossum (creator of the Python programming language) said. Usually you write a piece of code once and never touch it again. But you’ll probably get back to it several times since it’s now part of your project and each time you will have to remember how it works and what it does. That’s when readability really matters.\nPEP8 is a document designed to provide guidelines and best practices on how to write Python code. It is now considered as the reference style guide for Python code and can be found here. A package has also been developed to allow you to check your Python code against some of the PEP8 conventions (project description here). To install it using pip, run:\n1pip install pep8 .\nWe\u0026rsquo;ve only decided to list below the guidelines linked to code layout as there are many guidelines and the official guide is very clear and easy to read.\nCode Lay-out Indentation\n4 spaces per indentation level.\nIn case of line continuations (to keep lines to under 79 characters), there are two styles of indentation you can use:\n align the indented block with the opening delimiter add 4 spaces (an extra level of indentation) to distinguish arguments from the rest  1# Aligned with opening delimiter 2foo = long_function_name(var_one, var_two, 3var_three, var_four) 1# Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest. 2def long_function_name( 3var_one, var_two, var_three, 4var_four): 5print(var_one) 1# Hanging indents (=every line but the first in a paragraph  2# or statement is indented) should add a level. 3foo = long_function_name( 4var_one, var_two, 5var_three, var_four) The closing brace/bracket/parenthesis on multiline constructs may either:\n line up under the first non-whitespace character of the last line of list be lined up under the first character of the line that starts the multiline construct  1my_list = [ 21, 2, 3, 34, 5, 6, 4] 5result = some_function_that_takes_arguments( 6\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, 7\u0026#39;d\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;f\u0026#39;, 8) 1my_list = [ 21, 2, 3, 34, 5, 6, 4] 5result = some_function_that_takes_arguments( 6\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, 7\u0026#39;d\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;f\u0026#39;, 8) Tabs or spaces?\nSpaces\nMaximum line length\n79 (72 for comments/docstrings)\nShould a line break before or after a binary operator?\nBefore\n1income = (gross_wages 2+ taxable_interest 3+ (dividends - qualified_dividends) 4- ira_deduction 5- student_loan_interest) Blank lines\n top-level functions and class definitions: 2 lines above and below method definitions inside a class: 1 line above and below  Imports\n imports should always be on separate lines imports are always put at the top of the file, just after any module comments and docstrings, and before module globals and constants.  Imports should be grouped in the following order:\n Standard library imports. Related third party imports. Local application/library specific imports.  You should put a blank line between each group of imports.\n absolute imports are recommended  1import mypkg.sibling 2from mypkg import sibling 3from mypkg.sibling import example  wildcard imports (from module import *) should be avoided  Python packages for formatting, typing and linting flake8 black isort mypy nbqa black nbqa isort end-of-file-fixer ","date":"Mar 4, 2022","img":"","permalink":"/en/posts/python-conventions/","series":null,"tags":["Python","PEP8","flake8","black","isort","mypy","nbqa black","nbqa isort","end-of-file-fixer"],"title":"Python Conventions"},{"categories":["Menu"],"content":"We predefined two types of menus: main and footer, represents the top app bar menus and the footer menus, respectively. This article will briefly introduce how to use the menus.\nMenu Entry Properties    Property Type Description     name String The name of menu.   identifier String The ID of menu.   weight Number The weight of menu that used for sorting in ascending order.   parent String The identifier of parent menu entry.   url String The URL of menu.   pre String The leading string before menu name.   post String The trailing string after menu name.   params Object Menu parameters.   params.divider Boolean true means divider.    See also Menu Entry Properties.\nUsage Configuration  The menu configuration file is located in config/_default/menu.toml by default.\n Let\u0026rsquo;s take main menu as an example:\n1[[main]] 2name = \u0026#34;FooBar\u0026#34; 3identifier = \u0026#34;foobar\u0026#34; 4weight = 1 5pre = \u0026#39;\u0026lt;i class=\u0026#34;fas fa-fw fa-chevron-circle-down\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026#39; 6[[main]] 7name = \u0026#34;Foo\u0026#34; 8identifier = \u0026#34;foo\u0026#34; 9parent = \u0026#34;foobar\u0026#34; 10url = \u0026#34;https://github.com/razonyang/hugo-theme-bootstrap\u0026#34; 11weight = 1 12[[main]] 13parent = \u0026#34;foobar\u0026#34; 14identifier = \u0026#34;foobar-divider\u0026#34; 15weight = 2 16[main.params] 17divider = true 18[[main]] 19name = \u0026#34;Bar\u0026#34; 20identifier = \u0026#34;bar\u0026#34; 21parent = \u0026#34;foobar\u0026#34; 22url = \u0026#34;https://github.com/razonyang/hugo-theme-bootstrap/discussions/new\u0026#34; 23weight = 3 As the image shown, we created a top level menu called foobar, that contains sub menus and divider.\nFront Matter We can also configure menu via page front matter.\n1[menu.main] 2parent = \u0026#34;support\u0026#34; 3weight = 6 4[menu.footer] 5parent = \u0026#34;support\u0026#34; 6weight = 6 7pre = \u0026#39;\u0026lt;i class=\u0026#34;fas fa-fw fa-quetion-circle\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026#39; The code snippet appends the page to the main and footer menu.\n It\u0026rsquo;s no need to specify the url and name parameters.\n","date":"Dec 16, 2021","img":"","permalink":"/en/docs/menu/","series":["Docs"],"tags":["Main Menu","Footer Menu"],"title":"Menu"},{"categories":null,"content":"Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.\nHugo makes use of a variety of open source projects including:\n https://github.com/yuin/goldmark https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper  Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.\nHugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.\nWebsites built with Hugo are extremelly fast, secure and can be deployed anywhere including, AWS, GitHub Pages, Heroku, Netlify and any other hosting provider.\nLearn more and contribute on GitHub.\n","date":"Feb 28, 2019","img":"","permalink":"/en/about/","series":null,"tags":null,"title":"About"},{"categories":null,"content":"","date":"Jan 1, 0001","img":"","permalink":"/en/contact/","series":null,"tags":null,"title":"Contact Us"},{"categories":null,"content":"","date":"Jan 1, 0001","img":"","permalink":"/en/faq/","series":null,"tags":null,"title":"FAQs"},{"categories":null,"content":"","date":"Jan 1, 0001","img":"","permalink":"/en/offline/","series":null,"tags":null,"title":"Offline"}]